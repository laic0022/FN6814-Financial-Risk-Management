"""
Name:   Utilities for dynamic delta hedging
Description:
Author:      YANG YIFAN
Created:     2023
"""
import BlackScholes as bs
import numpy as np
import math
import pandas as pd

def simuale_share_prices(share_prices, simu_dates, num_path, s0, r, simu_vol):
    '''
    simulate share price on each path and each simulation date
    :param share_prices: output, numpy array, size the number of simulation dates * the number of path
    :param simu_dates:
    :param num_path:
    :param r: interest free rate
    :param simu_vol: const vol in log normal model
    :return:
    '''
    # student implementation #

def compute_hedge_costs(hedge_costs, simu_prices, simu_dates, k, r, implied_vol, is_call, simu_vol, num_option):
    '''
    compute hedging costs, per simulation path, per rebalance perid
    :param share_prices: output, numpy array, size the number of simulation dates * the number of path
    :param simu_dates: generated by rebalance freq
    :param k: strike
    :param r: interest free rate
    :param implied_vol: for option pricing
    :param simu_vol: for share pricing simulation, realized vol
    :param r: the number of option to be hedged
    :return:
    '''
    # student implementation #

def process_hedge_costs(hedge_cost, bs_price, rebalace_weeks):
    mean_hedge_cost = hedge_cost.mean()
    std_hedge_cost = np.std(hedge_cost)
    hedge_ratio = std_hedge_cost/ bs_price[0]
    print("#rebalance weeks is", rebalace_weeks, "#")
    print("mean hedge cost is", round(mean_hedge_cost, 2))
    print("standard deviation hedge cost is", round(std_hedge_cost, 2))
    print("hedge ratio is", round(hedge_ratio , 2))
    print("#end rebalance weeks", rebalace_weeks, "#")
